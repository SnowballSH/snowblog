---
// src/components/BlogPost.astro
import { renderMarkdown } from "../utils/markdown";
import "highlight.js/styles/github.css";
import "katex/dist/katex.min.css";

interface Blog {
  id: string;
  title: string;
  content: string;
  excerpt?: string;
  createdAt: string;
  tags?: string[];
}

interface Props {
  blog: Blog;
}

const { blog } = Astro.props as Props;

// Process markdown content with syntax highlighting and LaTeX
const renderedContent = await renderMarkdown(blog.content);
---

<article>
  <header>
    <h1>{blog.title}</h1>
    <p><em>Published on {new Date(blog.createdAt).toLocaleDateString()}</em></p>
    <div class="blog-actions">
      <a href={`/blog/edit/${blog.id}`} class="btn btn-info">Edit</a>
      <button id="delete-btn" class="btn btn-danger" data-blog-id={blog.id}>Delete</button>
      <a href="/" class="btn btn-secondary">Back to List</a>
    </div>
  </header>
  
  <div class="content" set:html={renderedContent} />
</article>

<script define:vars={{ blogId: blog.id }}>
  document.getElementById('delete-btn')?.addEventListener('click', async function() {
    // Show confirmation dialog
    if (confirm('Are you sure you want to delete this blog post? This action cannot be undone.')) {
      try {
        console.log(`Attempting to delete blog with ID: ${blogId}`);
        const response = await fetch(`http://localhost:8000/api/blogs/${blogId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          // Fetch API requires credentials: 'same-origin' for cookies/sessions
          credentials: 'same-origin',
        });
        console.log('Delete response status:', response.status);
        
        if (response.ok) {
          // Redirect to home page on success
          window.location.href = '/';
        } else {
          // Try to parse error as JSON first
          let errorMessage;
          try {
            const errorData = await response.json();
            errorMessage = errorData.error || JSON.stringify(errorData);
          } catch (e) {
            // If not JSON, get as text
            errorMessage = await response.text();
          }
          console.error(`Delete failed with status ${response.status}: ${errorMessage}`);
          alert(`Failed to delete: ${errorMessage} (Status: ${response.status})`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    }
  });
</script>

<style>
  article {
    max-width: 800px;
    margin: 1rem auto;
    background-color: var(--background-color);
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    padding: 2rem;
  }
  
  header {
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1.5rem;
    background-color: #ffffff !important;
  }
  
  header h1 {
    color: var(--text-color);
    font-size: 2.5rem;
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-weight: 700;
  }
  
  header p {
    color: var(--light-text);
    margin-top: 0;
    font-style: italic;
  }
  
  .blog-actions {
    margin-top: 1.5rem;
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }
  
  .content {
    line-height: 1.8;
    color: var(--text-color);
    font-size: 1.05rem;
  }
  
  .content :global(p) {
    color: var(--text-color);
    margin-bottom: 1rem;
  }
  
  /* Don't override highlight.js colors inside code blocks */
  .content :global(div:not(.hljs *)), 
  .content :global(span:not(.hljs *)),
  .content :global(li:not(.hljs *)) {
    color: var(--text-color);
  }
  
  /* Ensure highlight.js colors are preserved */
  .content :global(.hljs-keyword),
  .content :global(.hljs-selector-tag),
  .content :global(.hljs-type),
  .content :global(.hljs-literal),
  .content :global(.hljs-symbol),
  .content :global(.hljs-bullet),
  .content :global(.hljs-attribute),
  .content :global(.hljs-title),
  .content :global(.hljs-section),
  .content :global(.hljs-name) {
    color: inherit;
  }
  
  .content :global(.hljs-attr),
  .content :global(.hljs-variable),
  .content :global(.hljs-template-variable),
  .content :global(.hljs-code),
  .content :global(.hljs-string),
  .content :global(.hljs-doctag),
  .content :global(.hljs-number),
  .content :global(.hljs-regexp),
  .content :global(.hljs-meta) {
    color: inherit;
  }
  
  .content :global(.hljs-comment),
  .content :global(.hljs-quote) {
    color: inherit;
  }
  
  .content :global(h1) {
    color: var(--text-color);
    font-size: 2.2rem;
    margin-top: 2.5rem;
    margin-bottom: 1.2rem;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .content :global(h2) {
    color: var(--text-color);
    font-size: 1.8rem;
    margin-top: 2.2rem;
    margin-bottom: 1.2rem;
    padding-bottom: 0.2rem;
  }
  
  .content :global(h3) {
    color: var(--text-color);
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .content :global(ul), .content :global(ol) {
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .content :global(a) {
    color: var(--primary-color);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s;
  }
  
  .content :global(a:hover) {
    text-decoration: none;
    border-bottom: 1px solid var(--primary-color);
  }
  
  .content :global(pre),
  .content :global(code) {
    font-family: 'Courier New', Courier, monospace;
    background-color: var(--light-color);
    border: 1px solid var(--border-color);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9rem;
  }
  
  .content :global(pre) {
    padding: 1rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .content :global(pre code) {
    border: none;
    padding: 0;
    background: none;
  }
  
  /* LaTeX styling - copied from BlogList */
  .content :global(.katex) {
    font-size: 1.05em;
  }
  
  .content :global(.katex-display) {
    margin: 1rem 0;
    overflow-x: auto;
  }
  
  .content :global(.katex-html) {
    overflow-x: auto;
    overflow-y: hidden;
  }
  
  .content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 1.5rem 0;
    display: block;
  }
  
  .content :global(blockquote) {
    border-left: 4px solid var(--primary-color);
    padding: 0.5rem 0 0.5rem 1.5rem;
    background-color: rgba(74, 137, 220, 0.05);
    color: var(--text-color);
    margin: 1.5rem 0;
    border-radius: 0 4px 4px 0;
    font-style: italic;
  }
  
  .content :global(hr) {
    border: 0;
    height: 1px;
    background-color: var(--border-color);
    margin: 2rem 0;
  }
  
  .content :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }
  
  .content :global(th), .content :global(td) {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
  }
  
  .content :global(th) {
    background-color: var(--light-color);
    font-weight: 600;
  }
  
  @media (max-width: 768px) {
    article {
      padding: 1.25rem;
      border-radius: 0;
      box-shadow: none;
    }
    
    header h1 {
      font-size: 2rem;
    }
    
    .content {
      font-size: 1rem;
    }
    
    .content :global(h1) {
      font-size: 1.8rem;
    }
    
    .content :global(h2) {
      font-size: 1.5rem;
    }
    
    .content :global(h3) {
      font-size: 1.3rem;
    }
  }
</style>